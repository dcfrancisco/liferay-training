/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.training.petclinic.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.training.petclinic.model.Owner;
import com.liferay.training.petclinic.model.OwnerModel;
import com.liferay.training.petclinic.model.OwnerSoap;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Owner service. Represents a row in the &quot;PetClinic_Owner&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OwnerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OwnerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OwnerImpl
 * @generated
 */
@JSON(strict = true)
public class OwnerModelImpl extends BaseModelImpl<Owner> implements OwnerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a owner model instance should use the <code>Owner</code> interface instead.
	 */
	public static final String TABLE_NAME = "PetClinic_Owner";

	public static final Object[][] TABLE_COLUMNS = {
		{"ownerId", Types.BIGINT}, {"firstName", Types.VARCHAR},
		{"lastName", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"city", Types.VARCHAR}, {"telephone", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ownerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephone", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PetClinic_Owner (ownerId LONG not null primary key,firstName VARCHAR(75) null,lastName VARCHAR(75) null,address VARCHAR(75) null,city VARCHAR(75) null,telephone VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table PetClinic_Owner";

	public static final String ORDER_BY_JPQL = " ORDER BY owner.ownerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PetClinic_Owner.ownerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OWNERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Owner toModel(OwnerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Owner model = new OwnerImpl();

		model.setOwnerId(soapModel.getOwnerId());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setAddress(soapModel.getAddress());
		model.setCity(soapModel.getCity());
		model.setTelephone(soapModel.getTelephone());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Owner> toModels(OwnerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Owner> models = new ArrayList<Owner>(soapModels.length);

		for (OwnerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public OwnerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ownerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOwnerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ownerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Owner.class;
	}

	@Override
	public String getModelClassName() {
		return Owner.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Owner, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Owner, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Owner, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Owner)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Owner, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Owner, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Owner)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Owner, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Owner, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Owner, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<Owner, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Owner, Object>>();

		attributeGetterFunctions.put("ownerId", Owner::getOwnerId);
		attributeGetterFunctions.put("firstName", Owner::getFirstName);
		attributeGetterFunctions.put("lastName", Owner::getLastName);
		attributeGetterFunctions.put("address", Owner::getAddress);
		attributeGetterFunctions.put("city", Owner::getCity);
		attributeGetterFunctions.put("telephone", Owner::getTelephone);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<Owner, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<Owner, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Owner, ?>>();

		attributeSetterBiConsumers.put(
			"ownerId", (BiConsumer<Owner, Long>)Owner::setOwnerId);
		attributeSetterBiConsumers.put(
			"firstName", (BiConsumer<Owner, String>)Owner::setFirstName);
		attributeSetterBiConsumers.put(
			"lastName", (BiConsumer<Owner, String>)Owner::setLastName);
		attributeSetterBiConsumers.put(
			"address", (BiConsumer<Owner, String>)Owner::setAddress);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Owner, String>)Owner::setCity);
		attributeSetterBiConsumers.put(
			"telephone", (BiConsumer<Owner, String>)Owner::setTelephone);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getOwnerId() {
		return _ownerId;
	}

	@Override
	public void setOwnerId(long ownerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerId = ownerId;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getTelephone() {
		if (_telephone == null) {
			return "";
		}
		else {
			return _telephone;
		}
	}

	@Override
	public void setTelephone(String telephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephone = telephone;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Owner.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Owner toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Owner>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OwnerImpl ownerImpl = new OwnerImpl();

		ownerImpl.setOwnerId(getOwnerId());
		ownerImpl.setFirstName(getFirstName());
		ownerImpl.setLastName(getLastName());
		ownerImpl.setAddress(getAddress());
		ownerImpl.setCity(getCity());
		ownerImpl.setTelephone(getTelephone());

		ownerImpl.resetOriginalValues();

		return ownerImpl;
	}

	@Override
	public int compareTo(Owner owner) {
		long primaryKey = owner.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Owner)) {
			return false;
		}

		Owner owner = (Owner)object;

		long primaryKey = owner.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Owner> toCacheModel() {
		OwnerCacheModel ownerCacheModel = new OwnerCacheModel();

		ownerCacheModel.ownerId = getOwnerId();

		ownerCacheModel.firstName = getFirstName();

		String firstName = ownerCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			ownerCacheModel.firstName = null;
		}

		ownerCacheModel.lastName = getLastName();

		String lastName = ownerCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			ownerCacheModel.lastName = null;
		}

		ownerCacheModel.address = getAddress();

		String address = ownerCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			ownerCacheModel.address = null;
		}

		ownerCacheModel.city = getCity();

		String city = ownerCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			ownerCacheModel.city = null;
		}

		ownerCacheModel.telephone = getTelephone();

		String telephone = ownerCacheModel.telephone;

		if ((telephone != null) && (telephone.length() == 0)) {
			ownerCacheModel.telephone = null;
		}

		return ownerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Owner, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Owner, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Owner, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Owner)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Owner, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Owner, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Owner, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Owner)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Owner>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Owner.class, ModelWrapper.class);

	}

	private long _ownerId;
	private String _firstName;
	private String _lastName;
	private String _address;
	private String _city;
	private String _telephone;

	public <T> T getColumnValue(String columnName) {
		Function<Owner, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Owner)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ownerId", _ownerId);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("telephone", _telephone);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ownerId", 1L);

		columnBitmasks.put("firstName", 2L);

		columnBitmasks.put("lastName", 4L);

		columnBitmasks.put("address", 8L);

		columnBitmasks.put("city", 16L);

		columnBitmasks.put("telephone", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Owner _escapedModel;

}